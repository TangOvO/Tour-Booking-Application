<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="AiLvYou.dao.UserDaoInterface">

    <!--无实体类写法，多表拼接时使用-->
    <resultMap id="testMap" type="java.util.Map">
        <result property="title" column="title"/>
        <result property="id" column="id"/>
        <result property="s2" column="s2"/>
        <result property="s3" column="s3"/>
    </resultMap>

    <select id="queryA114" resultMap="testMap">
        select a.id, a.title, b.s2, b.s3 from routine a, detail b where a.id = b.routineID
    </select>

    <!--用户-->
    <!--返回所有用户 public List<Client> LoginSearch(Client client);-->
    <select id="LoginSearch" resultType="User">
        select * from client
    </select>

    <!--用户名查询用户 public Client searchClientByName(String name);-->
    <select id="searchClientByName" parameterType="String" resultType="User">
        select * from client where name = #{name}
    </select>

    <!--用户ID查询用户 public Client searchClientByID(int clientID);-->
    <select id="searchClientByID" parameterType="int" resultType="User">
        select * from client where id = #{id}
    </select>

    <!--插入用户 public int insertClient(Client client);-->
    <insert id="insertClient" parameterType="User">
        insert into client (id, name, pwd, phoneNumber, score) values (#{id}, #{pwd}, #{phoneNumber}, #{score})
    </insert>

    <!--删除用户 public int deleteClient(Client client);-->
    <delete id="deleteClient" parameterType="User">
        delete from client where id = #{id}
    </delete>

    <!--修改用户信息 public int updateClient(Client client);-->
    <update id="updateClient" parameterType="User">
        update client set name = #{name}, pwd = #{pwd}, phoneNumber = #{phoneNumber}, score = #{score} where id = #{id}
    </update>

    <!-- 订单客户信息 Guest -->
    <!--更新guest public int updateGuest(Guest guest);-->
    <update id="updateGuest" parameterType="AiLvYou.entity.Guest">
        update guest set name = #{name}, identity = #{identity}, phoneNumber = #{phoneNumber}, status = #{status} where identity = #{identity}
    </update>

    <!--插入Guest信息 public int insertGuest(Guest guest);-->
    <insert id="insertGuest" parameterType="AiLvYou.entity.Guest">
        insert into guest (orderID, name, identity, phoneNumber, status) values (#{orderID}, #{name}, #{identity}, #{phoneNumber}, #{status})
    </insert>

    <!--删除Guest信息 public int deleteGuest(Guest guest);-->
    <delete id="deleteGuest" parameterType="AiLvYou.entity.Guest">
        delete from guest where orderID = #{orderID} and identity = #{identity}
    </delete>

    <!--删除Guest信息 public int deleteGuestByIdentity(long identity);-->
    <delete id="deleteGuestByIdentity" parameterType="Long">
        delete from guest where identity = #{identity}
    </delete>

    <!--删除订单全部guest public int deleteGuest(long orderID);
    <delete id="deleteGuest" parameterType="Long">
        delete from guest where orderid = #{orderID}
    </delete>-->

    <!--查找Guest public Guest searchGuest(int orderID, int identity);-->
    <select id="searchGuest" parameterType="int" resultType="AiLvYou.entity.Guest">
        select * from guest where orderID = #{orderID}, identity = #{identity}
    </select>


    <!--orderID查找Guest  public List<Guest> searchGuest(long orderID);
    <select id="searchGuest" parameterType="Long" resultType="AiLvYou.entity.Guest">
        select * from guest where orderid = #{orderID}
    </select>-->

    <!-- order。订单分类查询service层处理 -->
    <!-- 查询订单  public List<Order> searchOrders(); -->
    <select id="searchOrders" resultType="AiLvYou.entity.Order">
        select * from orders
    </select>

    <!-- 查询某客户（clientID）全部订单  public List<Order> searchOrders(int clientID);
    <select id="searchOrders" resultType="AiLvYou.entity.Order" parameterType="int">
        select * from orders where clientID = #{clientID}
    </select>-->

    <!-- 修改order时用于查询该order  public Order searchOrders(int clientID, int routineID);
    <select id="searchOrders" parameterType="map" resultType="AiLvYou.entity.Order">
        select * from orders where routineID = #{routineID} and clientID = #{clientID}
    </select>-->

    <!-- orderID查询该order public Order searchOrder(long orderID); -->
    <select id="searchOrder" parameterType="long" resultType="AiLvYou.entity.Order">
        select * from orders where orderID = #{orderID}
    </select>

    <!-- 查询未评价订单 public List<Order> searchOrdersUncomment(int clientID); -->

    <!-- 修改订单  public int updateOrder(Order order, String fieldName); -->
    <!-- 增加新订单  public int insertOrder(Order order); -->
    <!-- routineID查询order    public List<Order> searchOrderByRoutine(int routnieID);  -->
    <!-- 更新order   public int updateOrder(Order order); -->
    <!-- 删除order   public int updateOrder(Order order); -->


    <!-- 历史记录 -->
    <!-- 查询历史记录   List<History> searchHistory(int clientID); -->
    <select id="searchHistory" parameterType="int" resultType="AiLvYou.entity.History">
        select * from history where clientID = #{clientID}
    </select>
    <!-- 插入新历史记录   public int insertHistory(History history); -->
    <insert id="insertHistory" parameterType="AiLvYou.entity.History">
        insert into history (clientID, routineID, time) values (#{clientID}, #{routineID}, #{time})
    </insert>
    <!-- 更新历史记录    public int updateHistory(History history); -->
    <update id="updateHistory" parameterType="AiLvYou.entity.History">

    </update>

    <!-- 路线 -->
    <!-- 查询全部路线    public List<Routine> allRoutines(); -->
    <select id="allRoutines" resultType="AiLvYou.entity.Routine">
        select * from routine
    </select>

    <!-- id查询路线     public Routine searchRoutine(int id); -->
    <select id="searchRoutine" parameterType="int" resultType="AiLvYou.entity.Routine">
        select * from routine where id = #{id}
    </select>
    <!-- 路线信息更新   public int updateRoutine(Routine routine); -->
    <!-- routineID查询该线路的全部详细信息detail   public List<Detail> details(int routineID); -->
    <!-- routineID查询该线路的全部特色图片     public List<RoutineFeatureImg> featureImgs(int routineID); -->
    <!-- featureImgs根据List<>RoutineFeatureImg     public int UpdateFeatureImgs(List<RoutineFeatureImg> list); -->
    <!-- 根据routineID删除全部RoutineFeatureImg   public int deleteFeatureImgs(int routineID); -->
    <!-- 插入一条RoutineFeatureImg     public int insertRoutineFeatureImg(RoutineFeatureImg featureImg); -->
    <!-- 路线个数   public int numOfRoutines();  -->
    <!-- 分页查询routine  public List<Routine> allRoutinesPage(int currPage, int numPerPage); -->
    <!-- 删除路线   public int deleteRoutine(int routineID); -->
    <!-- 新增路线   public int newRoutine(Routine routine); -->

    <!-- 评论 -->
    <!-- 增加评论   public int insertComment(Comment comment); -->
    <!-- 查询评论   public List<Comment> searchComments(String fieldName, int id); -->

    <!-- 优惠信息 -->
    <!-- routineID查询优惠信息   public Discount searchDiscount(int routineID); -->
    <!-- 更新优惠信息    public int updateDiscount(Discount discount); -->

    <!-- Detail操作 -->
    <!-- 根据routineID更新全部detail   public int updateAllDetail(List<Detail> details); -->
    <!-- 根据routineID删除全部detail   public int deleteAllDetail(int routineID); -->
    <!-- 删除 比较routineID和time删除一条detail   public int deleteDetail(Detail detail); -->
    <!-- 更新一条detail 根据routineID time定位   public int updateDetail(Detail detail); -->
    <!-- 插入一条detail    public int insertDetail(Detail detail); -->

    <!-- 分类  -->
    <!-- 分页查询category    public List<Category> allCategoryPage(int currPage, int numPerPage); -->
    <!-- 查询分类 type字段分类   public List<Category> searchCategory(String type); -->
    <!-- 查询全部分类   public List<Category> searchCategory(); -->
    <!-- 根据categoryID查询routine  public List<Routine> srarchRoutineByCategory(int categoryID); -->
    <!-- 根据categoryID删除Category  public int deleteCategory(int categoryID); -->
    <!-- 更新一条category  public int updateCategory(Category category); -->
    <!-- 插入一条category  public int insertCateGory(Category category); -->
    <!-- 插入一条CategoryRoutine  public int insertCategoryRoutine(CategoryRoutine categoryRoutine); -->
    <!-- 删除一条CategoryRoutine  public int deleteCategoryRoutine(CategoryRoutine categoryRoutine); -->
    <!--  -->
</mapper>